#!/usr/bin/env perl

use strict;
use warnings;

use AnyEvent;
use AnyEvent::IRC::Client;
use HTTP::Cookies;
use IO::File;
use WWW::Mechanize;
use XML::RSSLite;
use YAML qw(LoadFile);

my %DISPATCH_IGNORE = map { $_, 1 } qw(
  JOIN
  MODE
  NICK
  NOTICE
  PART
  PING
  PONG
  PRIVMSG
  QUIT
);
my %UNITS = (
    KB => 1024,
    MB => 1024 * 1024,
    GB => 1024 * 1024 * 1024,
);
my %SEEN;

my $timer;
my $config;
load_config();

use Data::Dumper;
#warn Dumper $config;

my $cookies = HTTP::Cookies->new;
foreach my $key (qw(uid pass)) {
    $cookies->set_cookie(1, $key, $config->{feeds}{bitmetv}{$key}, '/', 'www.bitmetv.org', '80');
}
my $mech = WWW::Mechanize->new(
    cookie_jar => $cookies
);

my $c = AnyEvent->condvar;

my $con = AnyEvent::IRC::Client->new;

my %sig;
$sig{HUP}  = AnyEvent->signal(signal => 'HUP',  cb => sub { reconnect() });
$sig{USR1} = AnyEvent->signal(signal => 'USR1', cb => sub { load_config() });
$sig{USR2} = AnyEvent->signal(
    signal => 'USR2',
    cb     => sub {
        debug('dumping %SEEN');
        foreach my $key (sort { $SEEN{$a} <=> $SEEN{$b} } keys %SEEN) {
            warn '    ',scalar localtime($SEEN{$key}),': saw ',$key,"\n";
        }
    }
);

$con->reg_cb(
    connect => sub {
        my ($con, $err) = @_;
        if (defined $err) {
            warn "connect error: $err\n";
            return;
        }
        debug('connected');
    },
    registered => sub {
        my ($con) = @_;
        debug('registered');
        send_for_invite($con);
    },
    disconnect => sub {
        my ($con) = @_;
        debug('disconnected');
    },
);

$con->reg_cb(
    debug_send => sub {
        my ($con, @params) = @_;
        #warn 'SEND: ',Dumper \@params;
    },
    debug_recv => sub {
        dispatch(@_);
    }
);

$con->reg_cb(
    privatemsg => sub { handle_message(@_) },
    publicmsg  => sub { handle_message(@_) },
);

$con->enable_ssl;
irc_connect($con);
# turn on ping
# dis/reconnect if ping times out
$con->enable_ping(300, sub { reconnect() });

$c->wait;

exit;

sub load_config {
    undef $timer;
    $config = LoadFile($ENV{HOME}.'/.torrent-watcher.yaml');
    debug('config loaded');
    $timer  = AnyEvent->timer(
        after    => 20,
        interval => $config->{rss}{sleep},
        cb       => sub {
            check_rss();
        }
    );
}

sub reconnect {
    debug('reconnecting');
    $con->disconnect;
    sleep 5;
    irc_connect($con);
}

sub debug {
    warn scalar localtime(time),': ', @_,"\n";
}

sub irc_connect {
    my ($con) = @_;
    $con->connect(
        $config->{irc}{server},
        $config->{irc}{port},
        {   nick     => $config->{irc}{nick},
            password => $config->{irc}{password},
            user     => $config->{irc}{name}
        }
    );
}

sub send_for_invite {
    my ($con) = @_;
    debug('sending for invite');
    $con->send_srv(
        PRIVMSG => $config->{irc}{botname},
        '!invite ' . $config->{irc}{nick} . ' ' . $config->{irc}{irckey}
    );
}

sub dispatch {
    my($con, $msg) = @_;
    my $cmd = $msg->{command};
    if ($cmd eq 'INVITE') {
        process_invite($con, $msg);
    }
    elsif ($DISPATCH_IGNORE{$cmd}) {
        # do nothing on commands we've configured to ignore
    }
    elsif ($cmd =~ m/^\d+$/) {
        # do nothing on numeric commands
    }
    else {
        warn 'UNRECOGNIZED: ', Dumper $msg;
    }
}

sub process_invite {
    my($con, $msg) = @_;
    my $channel = $msg->{params}[1];
    if ($config->{irc}{channels}{$channel}) {
        debug('accepting invite to ',$channel);
        $con->send_srv('JOIN', $channel);
    }
    else {
        debug('not interested in ',$channel);
    }
}

sub handle_message {
    my($con, $to, $msg) = @_;

    return unless $msg->{params}[0] eq '#bitmetv.announce';
    my($type, $rest) = split(/\s/, $msg->{params}[1], 2);
    return unless $type and $type eq 'BitMeTV.ORG';

    my %data = ($rest =~ m/(\S+):\s+\[\s+(.+?)\s+\]/g);
    return test_torrent(
        type  => 'irc',
        title => $data{Torrents},
        link  => $data{Link},
        size  => $data{Size},
    );
}

sub test_torrent {
    my %args = @_;

    return if $SEEN{$args{title}};

    debug $args{type},' saw ',$args{title};
    $SEEN{$args{title}} = time;

    # check positive regexes
    my $size = bytes($args{size});
    foreach my $test (keys %{$config->{feeds}{bitmetv}{regexes}}) {
        next unless $args{title} =~ m/$test/i;
        # check exclusions
        foreach my $ex (keys %{$config->{feeds}{bitmetv}{exclude}}) {
            next unless $config->{feeds}{bitmetv}{exclude}{$ex};
            if ($args{title} =~ m/$ex/i) {
                debug 'excluding [', $ex, '] ', $args{title};
                return;
            }
        }
        my $limit = $config->{feeds}{bitmetv}{regexes}{$test};
        my $bytes = bytes($limit);
        if ($size > $bytes) {
            debug 'would fetch ', $args{title}, ' but ', $args{size}, ' > ', $limit;
            return;
        }
        return fetch_torrent($args{link});
    }

    return;
}

sub bytes {
    my $str = shift;
    my($num, $unit) = split(/\s/, $str);
    return $num * $UNITS{$unit};
}

sub fetch_torrent {
    my($page) = @_;
    if ($page =~ m/details\.php/) {
        $mech->get($page);
        $page = $mech->find_link(url_regex => qr/download\.php/i)->url;
    }
    debug 'grabbing ', $page;
    $mech->get($page);
    my($file) = ($page =~ m@([^/]+)$@);
    my $fh = IO::File->new('>'.$config->{dropdir}.'/'.$file);
    $fh->print($mech->content);
    $fh->close;
    return 1;
}

sub check_rss {
    debug 'checking rss';
    my $xml;
    eval {
        $mech->get($config->{feeds}{bitmetv}{uri});
        $xml = $mech->content;
    };
    return unless $xml;
    my %feed;
    parseRSS(\%feed, \$xml);
    foreach my $item (@{$feed{item}}) {
        my $title = $item->{title};
        my $desc  = $item->{description};
        my $link  = $item->{link};
        my %desc  = ($desc =~ m/(\w+):\s+([\w\.\(\) ]+)/gs);
        test_torrent(
            type  => 'rss',
            title => $title,
            link  => $link,
            size  => $desc{Size},
        );
    }

    # prune %SEEN, keep entries for 24 hours
    my $now = time;
    my $limit = 60*60*24;
    foreach my $key (keys %SEEN) {
        delete $SEEN{$key} if ($now - $SEEN{$key} > $limit);
    }

    return 1;
}
